@page "/cadastro-aula/{id:int?}"  // Aceita um ID opcional para edição
@using CursosOnline.Model
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <h3 class="text-center mb-4">@((lesson.LessonID > 0) ? "Editar Aula" : "Cadastrar Aula")</h3>

            @if (!string.IsNullOrEmpty(mensagem))
            {
                <div class="alert @(sucesso ? "alert-success" : "alert-danger")" role="alert">
                    @mensagem
                </div>
            }

            <EditForm Model="@lesson" OnValidSubmit="EnviarAula">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />

                <div class="mb-3">
                    <label for="title" class="form-label">Título:</label>
                    <InputText id="title" @bind-Value="lesson.Title" class="form-control" required />
                </div>

                <div class="mb-3">
                    <label for="content" class="form-label">Conteúdo:</label>
                    <InputTextArea id="content" @bind-Value="lesson.Content" class="form-control" rows="3" required />
                </div>

                <div class="mb-3">
                    <label for="duration" class="form-label">Duração (HH:mm:ss):</label>
                    <InputText id="duration" @bind-Value="DurationString" class="form-control" placeholder="Formato: HH:mm:ss" required />
                </div>

                <button type="submit" class="btn btn-primary w-100">@(lesson.LessonID > 0 ? "Atualizar" : "Enviar")</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter] public int? Id { get; set; }  // ID da aula a ser editada
    private Lesson lesson = new Lesson();
    private string mensagem = string.Empty;
    private bool sucesso = true; 

    // Propriedade para converter TimeSpan? para string
    private string DurationString
    {
        get => lesson.Duration?.ToString(@"hh\:mm\:ss") ?? string.Empty;
        set
        {
            if (TimeSpan.TryParse(value, out var duration))
            {
                lesson.Duration = duration;
            }
            else
            {
                lesson.Duration = null;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            // Carregar a aula para edição
            var response = await Http.GetAsync($"api/Lesson/{Id}");
            if (response.IsSuccessStatusCode)
            {
                lesson = await response.Content.ReadFromJsonAsync<Lesson>();
            }
            else
            {
                mensagem = "Erro ao carregar a aula." + response;
                sucesso = false;
            }
        }
    }

    private async Task EnviarAula()
    {
        try
        {
            HttpResponseMessage response;

            if (lesson.LessonID > 0)  // Se a aula já existe, atualizar
            {
                response = await Http.PutAsJsonAsync($"api/Lesson/{lesson.LessonID}", lesson);
            }
            else  // Se a aula não existe, adicionar
            {
                response = await Http.PostAsJsonAsync("api/Lesson", lesson);
            }

            if (response.IsSuccessStatusCode)
            {
                mensagem = "Aula cadastrada/atualizada com sucesso!";
                sucesso = true; 
                lesson = new Lesson(); 

                // Redireciona para a página de lista de aulas
                Navigation.NavigateTo("/page-aulas");
            }
            else
            {
                mensagem = "Erro ao cadastrar/atualizar a aula.";
                sucesso = false; 
            }
        }
        catch (Exception ex)
        {
            mensagem = $"Erro na requisição: {ex.Message}";
            sucesso = false;
        }
    }
}
