@page "/page-aulas"
@using CursosOnline.Model
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="container my-5">
   <div class="d-flex justify-content-between align-items-center mb-3">
        <h3>Lista de Aulas</h3>
        <button class="btn btn-success" @onclick="AdicionarNovaAula">Adicionar Nova Aula</button>
    </div>

    @if (lessons == null)
    {
        <p>Carregando lições...</p>
    }
    else if (lessons.Count == 0)
    {
        <p>Nenhuma lição cadastrada.</p>
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Título</th>
                    <th>Conteúdo</th>
                    <th>Duração</th>
                    <th>Ações</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var lesson in lessons)
                {
                    <tr>
                        <td>@lesson.LessonID</td>
                        <td>@lesson.Title</td>
                        <td>@lesson.Content</td>
                        <td>@(lesson.Duration.HasValue ? lesson.Duration.Value.ToString(@"hh\:mm\:ss") : "N/A")</td>
                        <td>
                            <button class="btn btn-primary btn-sm me-2" @onclick="() => EditLesson(lesson.LessonID)">Editar</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => ConfirmRemove(lesson)">Remover</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@* Modal de Confirmação de Remoção *@
@if (showConfirmRemove)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar Remoção</h5>
                    <button type="button" class="btn-close" @onclick="CancelRemove"></button>
                </div>
                <div class="modal-body">
                    <p>Tem certeza de que deseja remover a lição "@lessonToRemove?.Title"?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelRemove">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="RemoveLesson">Remover</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Lesson>? lessons;
    private Lesson? lessonToRemove; // Para guardar a lição selecionada para remoção
    private bool showConfirmRemove = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadLessons();
    }

    private async Task LoadLessons()
    {
        try
        {
            lessons = await Http.GetFromJsonAsync<List<Lesson>>("api/Lesson");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar lições: {ex.Message}");
            lessons = new List<Lesson>();
        }
    }

    private void EditLesson(int lessonId)
    {
        Navigation.NavigateTo($"/cadastro-aula/{lessonId}");
    }

    private void ConfirmRemove(Lesson lesson)
    {
        lessonToRemove = lesson;
        showConfirmRemove = true;
    }

    private void CancelRemove()
    {
        lessonToRemove = null;
        showConfirmRemove = false;
    }

    private async Task RemoveLesson()
    {
        if (lessonToRemove != null)
        {
            try
            {
                var response = await Http.DeleteAsync($"api/Lesson/{lessonToRemove.LessonID}");
                if (response.IsSuccessStatusCode)
                {
                    lessons.Remove(lessonToRemove);
                    showConfirmRemove = false;
                    lessonToRemove = null;
                }
                else
                {
                    Console.WriteLine("Erro ao remover a lição.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro na requisição de remoção: {ex.Message}");
            }
        }
    }

    private void AdicionarNovaAula()
    {
        Navigation.NavigateTo("/cadastro-aula"); // Redireciona para a página de cadastro de nova aula
    }
}